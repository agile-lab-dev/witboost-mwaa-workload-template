apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: aws-workload-airflow-template.1
  title: Workload Airflow Template
  description: Create a repository containing the definition of a Airflow Workload
  mesh:
    icon: https://cwiki.apache.org/confluence/download/attachments/145723561/airflow_transparent.png?api=v2
  tags:
    - aws
    - airflow
    - workload
spec:
  generates: componenttype:default/workload
  owner: agilelab
  type: workload
  parameters:
    - title: Component metadata
      description: Basic information for this component
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required. The name of the component.
          ui:field: EntityNamePicker
          default: Airflow Workload
          ui:options:
            allowArbitraryValues: true
        fullyQualifiedName:
          title: Fully Qualified Name
          type: string
          description: Fully qualified name of the component.
        description:
          title: Description
          type: string
          description: Required. Help others understand what this component is for. What
            data will it expose?
        domain:
          title: Domain
          type: string
          description: Required. Domain of the Data Product this component belongs to.
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Required. Data Product this component belongs to.
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: Autogenerated from the information above. A unique identifier for
            the component. It will not be editable after creation and is a
            string composed of [a-zA-Z] separated by any of [-_].
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: DevelopmentGroup
          type: string
          description: Automatically selected from the Data Product metadata. Data Product
            development group.
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Dependencies
          type: array
          default: []
          items:
            type: string
            ui:field: EntityComponentsPicker
            ui:fieldName: dataproduct
            ui:options:
              allowArbitraryValues: false
          description: A component could depend on other components in the same Data
            Product. This information will be used to deploy the components in
            such an order that their dependencies already exist.
        readsFrom:
          title: Reads from
          type: array
          default: []
          items:
            type: string
            ui:field: ReadsFromPicker
          description: This is filled only for DataPipeline workloads and it represents
            the list of output ports or external systems that is reading.
        tags:
          title: Tags
          type: array
          default: []
          description: Tags for the component
          items:
            type: string
    - title: Airflow infrastructure details
      required:
        - scheduleCron
        - dagName
      properties:
        scheduleCron:
          title: Cron expression defining schedule
          type: string
          description: Cron expression defining schedule on which the job will trigger
        dagName:
          title: Dag Name
          type: string
          description: Name of the Airflow DAG
          ui:field: EntityNamePicker
          default: airbyte_snowflake_dag.py
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: .
        values:
          name: ${{ parameters.name }}
          fullyQualifiedName: ${{ parameters.fullyQualifiedName }}
          description: ${{ parameters.description }}
          domain: ${{ parameters.domain }}
          dataproduct: ${{ parameters.dataproduct }}
          identifier: ${{ parameters.identifier }}
          developmentGroup: ${{ parameters.developmentGroup }}
          dependsOn: ${{ parameters.dependsOn }}
          readsFrom: ${{ parameters.readsFrom }}
          tags: ${{ parameters.tags }}
          scheduleCron: ${{ parameters.scheduleCron }}
          dagName: ${{ parameters.dagName }}
          useCaseTemplateId: urn:dmb:utm:aws-airflow-workload-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:aws-workload-airflow-provisioner:0
          useCaseTemplateVersion: 0.0.0
          repoUrl: gitlab.com?owner=AgileDMBSandbox%2F${{orgname}}%2Fmesh.repository%2F${{
            parameters.domain | replace(r/domain:| |-/, "") }}%2F${{
            parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "")
            }}&repo=${{ parameters.name.split(" ") | join("") | lower }}
          destinationPath: dags/
          sourcePath: source/
          bucketName: bucketname
    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts:
          - gitlab.com
        description: This is ${{ parameters.name }}
        repoUrl: gitlab.com?owner=AgileDMBSandbox%2F${{orgname}}%2Fmesh.repository%2F${{
          parameters.domain | replace(r/domain:| |-/, "") }}%2F${{
          parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "")
          }}&repo=${{ parameters.name.split(" ") | join("") | lower }}
        rootDirectory: .
        dataproduct: ${{ parameters.dataproduct }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
